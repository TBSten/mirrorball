// THIS FILE IS AUTO GENERATED .
// DO NOT EDIT THIS FILE .
@file:Suppress(
    "PackageDirectoryMismatch",
    "unused",
)

package me.tbsten.mirrorball.attributes

import kotlin.Boolean
import kotlin.Float
import kotlin.Int
import kotlin.String
import kotlin.Suppress

fun AttrsScope.role(role: String) {
    attr("role", role)
}

fun AttrsScope.accessKey(accessKey: String) {
    attr("accesskey", accessKey)
}

fun AttrsScope.autoComplete(autoComplete: AutoComplete) {
    attr("autocomplete", autoComplete.enumValue)
}

enum class AutoComplete(
    val enumValue: String,
) {
    Off("off"),
    On("on"),
    Name("name"),
    HonorificPrefix("honorific-prefix"),
    GivenName("given-name"),
    AdditionalName("additional-name"),
    FamilyName("family-name"),
    HonorificSuffix("honorific-suffix"),
    Nickname("nickname"),
    Email("email"),
    Username("username"),
    NewPassword("new-password"),
    CurrentPassword("current-password"),
    OneTimeCode("one-time-code"),
    OrganizationTitle("organization-title"),
    Organization("organization"),
    StreetAddress("street-address"),
    Shipping("shipping"),
    Billing("billing"),
    AddressLine1("address-line1"),
    AddressLine2("address-line2"),
    AddressLine3("address-line3"),
    AddressLevel4("address-level4"),
    AddressLevel3("address-level3"),
    AddressLevel2("address-level2"),
    AddressLevel1("address-level1"),
    Country("country"),
    CountryName("country-name"),
    PostalCode("postal-code"),
    CcName("cc-name"),
    CcGivenName("cc-given-name"),
    CcAdditionalName("cc-additional-name"),
    CcFamilyName("cc-family-name"),
    CcNumber("cc-number"),
    CcExp("cc-exp"),
    CcExpMonth("cc-exp-month"),
    CcExpYear("cc-exp-year"),
    CcCsc("cc-csc"),
    CcType("cc-type"),
    TransactionCurrency("transaction-currency"),
    TransactionAmount("transaction-amount"),
    Language("language"),
    Bday("bday"),
    BdayDay("bday-day"),
    BdayMonth("bday-month"),
    BdayYear("bday-year"),
    Sex("sex"),
    Tel("tel"),
    TelCountryCode("tel-country-code"),
    TelNational("tel-national"),
    TelAreaCode("tel-area-code"),
    TelLocal("tel-local"),
    TelExtension("tel-extension"),
    Impp("impp"),
    Url("url"),
    Photo("photo"),
    Webauthn("webauthn"),
}

fun AttrsScope.autoFocus(autoFocus: Boolean) {
    attr("autofocus", autoFocus)
}

fun AttrsScope.className(className: String) {
    attr("class", className)
}

fun AttrsScope.contentEditable(contentEditable: ContentEditable) {
    attr("contenteditable", contentEditable.enumValue)
}

enum class ContentEditable(
    val enumValue: String,
) {
    True("true"),
    False("false"),
}

fun AttrsScope.dir(dir: Dir) {
    attr("dir", dir.enumValue)
}

enum class Dir(
    val enumValue: String,
) {
    Ltr("ltr"),
    Rtl("rtl"),
}

fun AttrsScope.draggable(draggable: Draggable) {
    attr("draggable", draggable.enumValue)
}

enum class Draggable(
    val enumValue: String,
) {
    True("true"),
    False("false"),
}

fun AttrsScope.draggable(draggable: Boolean) {
    attr("draggable", draggable)
}

fun AttrsScope.enterKeyHint(enterKeyHint: String) {
    attr("enterkeyhint", enterKeyHint)
}

fun AttrsScope.exportParts(exportParts: String) {
    attr("exportparts", exportParts)
}

fun AttrsScope.hidden(hidden: Boolean) {
    attr("hidden", hidden)
}

fun AttrsScope.id(id: String) {
    attr("id", id)
}

fun AttrsScope.inert(inert: Boolean) {
    attr("inert", inert)
}

fun AttrsScope.inputMode(inputMode: InputMode) {
    attr("inputmode", inputMode.enumValue)
}

enum class InputMode(
    val enumValue: String,
) {
    None("none"),
    Text("text"),
    Decimal("decimal"),
    Numeric("numeric"),
    Tel("tel"),
    Search("search"),
    Email("email"),
    Url("url"),
}

fun AttrsScope.htmlIs(htmlIs: String) {
    attr("is", htmlIs)
}

fun AttrsScope.itemid(itemid: String) {
    attr("itemid", itemid)
}

fun AttrsScope.itemProp(itemProp: String) {
    attr("itemprop", itemProp)
}

fun AttrsScope.itemRef(itemRef: String) {
    attr("itemref", itemRef)
}

fun AttrsScope.itemScope(itemScope: String) {
    attr("itemscope", itemScope)
}

fun AttrsScope.itemType(itemType: String) {
    attr("itemtype", itemType)
}

fun AttrsScope.lang(lang: String) {
    attr("lang", lang)
}

fun AttrsScope.nonce(nonce: String) {
    attr("nonce", nonce)
}

fun AttrsScope.part(part: String) {
    attr("part", part)
}

fun AttrsScope.popover(popover: String) {
    attr("popover", popover)
}

fun AttrsScope.slot(slot: String) {
    attr("slot", slot)
}

fun AttrsScope.spellCheck(spellCheck: SpellCheck) {
    attr("spellcheck", spellCheck.enumValue)
}

enum class SpellCheck(
    val enumValue: String,
) {
    True("true"),
    False("false"),
}

fun AttrsScope.tabIndex(tabIndex: Int) {
    attr("tabindex", tabIndex)
}

fun AttrsScope.tabIndex(tabIndex: Float) {
    attr("tabindex", tabIndex)
}

fun AttrsScope.title(title: String) {
    attr("title", title)
}

fun AttrsScope.translate(translate: Translate) {
    attr("translate", translate.enumValue)
}

enum class Translate(
    val enumValue: String,
) {
    Yes("yes"),
    No("no"),
}
