// THIS FILE IS AUTO GENERATED .
// DO NOT EDIT THIS FILE .
@file:Suppress(
    "PackageDirectoryMismatch",
    "unused",
)

package me.tbsten.mirrorball.elements

import me.tbsten.mirrorball.HtmlTagRef
import me.tbsten.mirrorball.attributes.AttrsScope
import me.tbsten.mirrorball.attributes.attr
import kotlin.Boolean
import kotlin.Float
import kotlin.Int
import kotlin.String
import kotlin.Suppress

class ImgAttrsScope(
    ref: HtmlTagRef,
) : AttrsScope(ref)

fun ImgAttrsScope.alt(alt: String) {
    attr("alt", alt)
}

fun ImgAttrsScope.crossOrigin(crossOrigin: ImgCrossOrigin) {
    attr("crossorigin", crossOrigin.enumValue)
}

enum class ImgCrossOrigin(
    val enumValue: String,
) {
    Anonymous("anonymous"),
    UseCredentials("use-credentials"),
}

fun ImgAttrsScope.decoding(decoding: ImgDecoding) {
    attr("decoding", decoding.enumValue)
}

enum class ImgDecoding(
    val enumValue: String,
) {
    Async("async"),
    Sync("sync"),
    Auto("auto"),
}

fun ImgAttrsScope.elementTiming(elementTiming: String) {
    attr("elementtiming", elementTiming)
}

fun ImgAttrsScope.fetchpriority(fetchpriority: ImgFetchpriority) {
    attr("fetchpriority", fetchpriority.enumValue)
}

enum class ImgFetchpriority(
    val enumValue: String,
) {
    High("high"),
    Low("low"),
    Auto("auto"),
}

fun ImgAttrsScope.height(height: Int) {
    attr("height", height)
}

fun ImgAttrsScope.height(height: Float) {
    attr("height", height)
}

fun ImgAttrsScope.ismap(ismap: Boolean) {
    attr("ismap", ismap)
}

fun ImgAttrsScope.loading(loading: ImgLoading) {
    attr("loading", loading.enumValue)
}

enum class ImgLoading(
    val enumValue: String,
) {
    Eager("eager"),
    Lazy("lazy"),
}

fun ImgAttrsScope.referrerPolicy(referrerPolicy: ImgReferrerPolicy) {
    attr("referrerpolicy", referrerPolicy.enumValue)
}

enum class ImgReferrerPolicy(
    val enumValue: String,
) {
    NoReferrer("no-referrer"),
    NoReferrerWHenDowngrade("no-referrer-when-downgrade"),
    Origin("origin"),
    OriginWhenCrossOrigin("origin-when-cross-origin"),
    SameOrigin("same-origin"),
    StrictOrigin("strict-origin"),
    StrictOriginWhenCrossOrigin("strict-origin-when-cross-origin"),
    UnsafeUrl("unsafe-url"),
}

fun ImgAttrsScope.sizes(sizes: String) {
    attr("sizes", sizes)
}

fun ImgAttrsScope.src(src: String) {
    attr("src", src)
}

fun ImgAttrsScope.srcSet(srcSet: String) {
    attr("srcset", srcSet)
}

fun ImgAttrsScope.width(width: Int) {
    attr("width", width)
}

fun ImgAttrsScope.width(width: Float) {
    attr("width", width)
}

fun ImgAttrsScope.useMap(useMap: String) {
    attr("usemap", useMap)
}
