package me.tbsten.compose.dom.generate

import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.joinAll
import kotlinx.coroutines.launch
import me.tbsten.compose.dom.generate.attributes.generateGlobalAttrsFile
import me.tbsten.compose.dom.generate.elements.generateElementsFiles
import java.io.File

suspend fun main(args: Array<String>) =
    coroutineScope {
//    val generateDirectory = File(args[0])
        val generateDirectory =
            File(args[0])
                .also { it.cleanAndMkdir() }

        println("$generateDirectory (${generateDirectory.exists()})")
        println("Generate to $generateDirectory")

        listOf(
            launch {
                generateElementsFiles(generateDirectory)
            },
            launch {
                generateGlobalAttrsFile(generateDirectory)
            },
        ).joinAll()
    }

/*
TODO
1. 要素ごとに/elements/elementnameを作ってElementName.kt,ElementNameAttrsContentScope.kt,ElementNameContentScope.ktを生成

> ElementName.kt

@file:Suppress("PackageDirectoryMismatch", "unused")

package me.tbsten.compose.dom.elements

/*
 *
 * THIS FILE IS AUTO GENERATED .
 * DO NOT EDIT THIS FILE .
 *
 */

import androidx.compose.runtime.Composable
import me.tbsten.compose.dom.HtmlTag
import me.tbsten.compose.dom.HtmlTagRef
import me.tbsten.compose.dom.rememberDefaultHtmlTagRef

@Composable
fun A(
    attrs: AAttrsScope.() -> Unit = { },
    ref: HtmlTagRef = rememberDefaultHtmlTagRef(),
    content: @Composable AContentScope.() -> Unit,
) {
    val attrsScope = AAttrsScope(ref = ref)
        .apply { attrs() }

    HtmlTag(
        localName = "a",
        attrs = { applyScope(attrsScope) },
        ref = ref,
        content = {
            val scope = AContentScope(ref)
            scope.content()
        },
    )
}


> ElementNameAttrsContentScope.kt

@file:Suppress("PackageDirectoryMismatch", "unused")

package me.tbsten.compose.dom.elements

/*
 *
 * THIS FILE IS AUTO GENERATED .
 * DO NOT EDIT THIS FILE .
 *
 */

import me.tbsten.compose.dom.HtmlTagRef
import me.tbsten.compose.dom.attributes.AttrsScope
import me.tbsten.compose.dom.attributes.attr

class ElementAttrsScope(ref: HtmlTagRef) : AttrsScope(ref = ref) {
    init {
        attr("init-attr-1", "initAttr1")
    }
}

fun ElementAttrsScope.attr1(attr1: String) = attr("attr-1", attr1)

fun ElementAttrsScope.attr2(attr2: Boolean) = attr("attr-2", attr2)

fun ElementAttrsScope.attr3(attr3: Float) = attr("attr-3", attr3)
fun ElementAttrsScope.attr3(attr3: Int) = attr("attr-3", attr3)

fun ElementAttrsScope.attr4(attr4: ElementAttr4) = attr("attr-4", attr4.value)

enum class ElementAttr4(val value: String) {
    X("x"),
    Y("y"),
    Z("z"),
}

> ElementNameContentScope.kt

@file:Suppress("PackageDirectoryMismatch", "unused")

package me.tbsten.compose.dom.elements

/*
 *
 * THIS FILE IS AUTO GENERATED .
 * DO NOT EDIT THIS FILE .
 *
 */

import me.tbsten.compose.dom.HtmlTagContentScope
import me.tbsten.compose.dom.HtmlTagRef

class ElementNameContentScope(ref: HtmlTagRef) : HtmlTagContentScope(ref)



2. グローバル属性を/attributes/GlobalAttrs.ktに生成する

@file:Suppress("PackageDirectoryMismatch", "unused")

package me.tbsten.compose.dom.attributes

/*
 *
 * THIS FILE IS AUTO GENERATED .
 * DO NOT EDIT THIS FILE .
 *
 */

fun AttrsScope.role(role: String) =
    attr("role", role)

...

 */
